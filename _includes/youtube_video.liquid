<div class="col">
  <div class="card h-100 hoverable">
    <div class="video-container" data-video-id="{{ video.video_id }}" data-video-title="{{ video.title }}">
      <!-- Clickable thumbnail that expands to video player -->
      <div class="video-thumbnail-container" onclick="expandVideo(this)">
        <img 
          src="https://img.youtube.com/vi/{{ video.video_id }}/hqdefault.jpg" 
          alt="{{ video.title }}"
          class="video-thumbnail"
          loading="lazy"
        >
        <div class="play-overlay">
          <div class="play-button">
            <i class="fas fa-play"></i>
          </div>
        </div>
        
      </div>
      
      <!-- Video player container (hidden initially) -->
      <div class="video-player-container" style="display: none;">
        <div class="video-player-header">
          <button class="close-video-btn" onclick="closeVideo(this)">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="video-iframe-container">
          <iframe 
            src=""
            title="{{ video.title }}"
            frameborder="0" 
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
            allowfullscreen>
          </iframe>
        </div>
      </div>
    </div>
    <div class="card-body">
      <h3 class="card-title">{{ video.title }}</h3>
      <p class="card-text">{{ video.description }}</p>
    </div>
  </div>
</div>

<style>
.video-container {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 56.25%; /* 16:9 aspect ratio */
  overflow: hidden;
  border-radius: 8px;
}

.video-thumbnail-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.video-thumbnail-container:hover {
  transform: scale(1.02);
  box-shadow: 0 8px 25px rgba(0,0,0,0.2);
}

.video-thumbnail {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 8px;
}

.play-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
  transition: background 0.3s ease;
}

.video-thumbnail-container:hover .play-overlay {
  background: rgba(0, 0, 0, 0.5);
}

.play-button {
  width: 80px;
  height: 80px;
  background: rgba(255, 0, 0, 0.9);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 24px;
  transition: transform 0.2s ease, background 0.2s ease;
}

.play-button:hover {
  transform: scale(1.1);
  background: rgba(255, 0, 0, 1);
}

.video-duration {
  position: absolute;
  bottom: 8px;
  right: 8px;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 500;
}

/* Video player container styles */
.video-player-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: #000;
  border-radius: 8px;
  z-index: 10;
}

.video-player-header {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 11;
  padding: 8px;
}

.close-video-btn {
  background: rgba(0, 0, 0, 0.7);
  border: none;
  color: white;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background 0.2s ease;
}

.close-video-btn:hover {
  background: rgba(0, 0, 0, 0.9);
}

.video-iframe-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.video-iframe-container iframe {
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 8px;
}

.card.hoverable:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  transition: all 0.3s ease;
}

.card-title {
  font-size: 1.1rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.card-text {
  font-size: 0.9rem;
  color: #666;
  line-height: 1.4;
}

/* Modal overlay for expanded video */
.video-modal-overlay {
  position: absolute;
  width: 100vw;
  height: 100vh;
  background: rgba(0, 0, 0, 0.9);
  z-index: 9999;
  display: none;
  align-items: center;
  justify-content: center;
  padding: 20px;
  box-sizing: border-box;
  overflow: hidden;
}

.video-modal-content {
  position: relative;
  width: 100%;
  max-width: 900px;
  max-height: 90vh;
  margin: auto;
  transform: translateY(-2vh); /* Slight upward adjustment for perfect centering */
}

.video-modal-close {
  position: absolute;
  top: -40px;
  right: 0;
  background: rgba(255, 255, 255, 0.2);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 18px;
  transition: background 0.2s ease;
}

.video-modal-close:hover {
  background: rgba(255, 255, 255, 0.3);
}

.video-modal-iframe {
  width: 100%;
  height: 0;
  padding-bottom: 56.25%;
  position: relative;
}

/* Responsive adjustments for smaller screens */
@media (max-width: 768px) {
  .video-modal-overlay {
    padding: 10px;
  }
  
  .video-modal-content {
    max-width: 95vw;
    max-height: 80vh;
  }
  
  .video-modal-close {
    top: -35px;
    width: 35px;
    height: 35px;
    font-size: 16px;
  }
}

.video-modal-iframe iframe {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 8px;
}
</style>

<script>
// Global video modal
let currentVideoModal = null;

// Function to expand video to modal
function expandVideo(thumbnailContainer) {
  const videoId = thumbnailContainer.parentElement.dataset.videoId;
  const videoTitle = thumbnailContainer.parentElement.dataset.videoTitle;
  
  // Get current scroll position and viewport dimensions
  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
  const viewportHeight = window.innerHeight;
  const viewportWidth = window.innerWidth;
  
  // Create modal overlay
  const modalOverlay = document.createElement('div');
  modalOverlay.className = 'video-modal-overlay';
  modalOverlay.innerHTML = `
    <div class="video-modal-content">
      <button class="video-modal-close" onclick="closeVideoModal()">
        <i class="fas fa-times"></i>
      </button>
      <div class="video-modal-iframe">
        <iframe 
          src="https://www.youtube.com/embed/${videoId}?rel=0&autoplay=1"
          title="${videoTitle}"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
          allowfullscreen>
        </iframe>
      </div>
    </div>
  `;
  
  // Position modal at current scroll position
  modalOverlay.style.position = 'absolute';
  modalOverlay.style.top = `${scrollTop}px`;
  modalOverlay.style.left = `${scrollLeft}px`;
  modalOverlay.style.width = '100vw';
  modalOverlay.style.height = '100vh';
  
  // Add modal to body
  document.body.appendChild(modalOverlay);
  
  // Show modal with animation
  setTimeout(() => {
    modalOverlay.style.display = 'flex';
    modalOverlay.style.opacity = '0';
    modalOverlay.style.transform = 'scale(0.95)';
    modalOverlay.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    setTimeout(() => {
      modalOverlay.style.opacity = '1';
      modalOverlay.style.transform = 'scale(1)';
    }, 10);
  }, 10);
  
  // Store reference to current modal and scroll position
  currentVideoModal = modalOverlay;
  currentVideoModal.dataset.scrollTop = scrollTop;
  currentVideoModal.dataset.scrollLeft = scrollLeft;
  
  // Prevent body scroll
  document.body.style.overflow = 'hidden';
  
  // Close modal on escape key
  document.addEventListener('keydown', handleEscapeKey);
}

// Function to close video modal
function closeVideoModal() {
  if (currentVideoModal) {
    // Store scroll position before closing
    const scrollTop = currentVideoModal.dataset.scrollTop;
    const scrollLeft = currentVideoModal.dataset.scrollLeft;
    
    currentVideoModal.style.opacity = '0';
    currentVideoModal.style.transform = 'scale(0.95)';
    setTimeout(() => {
      if (currentVideoModal.parentNode) {
        currentVideoModal.parentNode.removeChild(currentVideoModal);
      }
      currentVideoModal = null;
      document.body.style.overflow = '';
      document.removeEventListener('keydown', handleEscapeKey);
      
      // Restore scroll position to where the modal was opened
      if (scrollTop) {
        window.scrollTo(parseInt(scrollLeft) || 0, parseInt(scrollTop));
      }
    }, 300);
  }
}

// Handle escape key
function handleEscapeKey(event) {
  if (event.key === 'Escape') {
    closeVideoModal();
  }
}

// Close modal when clicking outside
document.addEventListener('click', (event) => {
  if (currentVideoModal && event.target === currentVideoModal) {
    closeVideoModal();
  }
});

// Function to close inline video (for compatibility)
function closeVideo(closeBtn) {
  const playerContainer = closeBtn.closest('.video-player-container');
  const thumbnailContainer = playerContainer.previousElementSibling;
  
  playerContainer.style.display = 'none';
  thumbnailContainer.style.display = 'block';
}
</script>
