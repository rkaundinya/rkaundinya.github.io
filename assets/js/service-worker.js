async function cacheFirst(t,e){const a=await caches.match(t);if(a)return a;try{const a=await fetch(t);if(a.ok){(await caches.open(e)).put(t,a.clone())}return a}catch(t){return new Response("Network error",{status:503})}}async function networkFirst(t,e){try{const a=await fetch(t);if(a.ok){(await caches.open(e)).put(t,a.clone())}return a}catch(e){const a=await caches.match(t);return a||new Response("Not available offline",{status:503})}}async function networkOnly(t){try{return await fetch(t)}catch(t){return new Response("Network error",{status:503})}}async function preloadPages(){const t=await caches.open(DYNAMIC_CACHE);for(const e of PAGES_TO_CACHE)try{const a=await fetch(e);a.ok&&await t.put(e,a)}catch(t){}}async function preloadSpecificPage(t){try{const e=await caches.open(DYNAMIC_CACHE),a=await fetch(t);a.ok&&await e.put(t,a)}catch(t){}}const CACHE_NAME="music-page-v1",STATIC_CACHE="static-v1",DYNAMIC_CACHE="dynamic-v1",STATIC_RESOURCES=["/assets/css/bootstrap.min.css","/assets/css/main.css","/assets/js/bootstrap.bundle.min.js","/assets/js/common.js","/assets/js/performance-optimizer.js"],PAGES_TO_CACHE=["/about/","/publications/","/cv/","/repositories/","/music/","/news/","/teaching/"];self.addEventListener("install",(t=>{t.waitUntil(caches.open(STATIC_CACHE).then((t=>t.addAll(STATIC_RESOURCES))).then((()=>self.skipWaiting())))})),self.addEventListener("activate",(t=>{t.waitUntil(caches.keys().then((t=>Promise.all(t.map((t=>{if(t!==STATIC_CACHE&&t!==DYNAMIC_CACHE)return caches.delete(t)}))))).then((()=>self.clients.claim())))})),self.addEventListener("fetch",(t=>{const{request:e}=t,a=new URL(e.url);"GET"===e.method&&(a.pathname.endsWith(".html")||a.pathname.endsWith("/")?t.respondWith(cacheFirst(e,DYNAMIC_CACHE)):a.pathname.includes("/assets/")||a.pathname.includes("img.youtube.com")?t.respondWith(cacheFirst(e,STATIC_CACHE)):a.pathname.includes("youtube.com/embed")||a.pathname.includes("spotify.com")?t.respondWith(networkOnly(e)):t.respondWith(networkFirst(e,DYNAMIC_CACHE)))})),self.addEventListener("sync",(t=>{"preload-pages"===t.tag&&t.waitUntil(preloadPages())})),self.addEventListener("message",(t=>{t.data&&"SKIP_WAITING"===t.data.type&&self.skipWaiting(),t.data&&"PRELOAD_PAGE"===t.data.type&&t.waitUntil(preloadSpecificPage(t.data.url))}));